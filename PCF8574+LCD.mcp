#include <pic.h>
#define _XTAL_FREQ 20000000

// LCD control bits through PCF8574
#define RS 0x01
#define RW 0x02
#define EN 0x04
#define BL 0x08   // Backlight

// PCF8574 I2C Address (A0=A1=A2=0 -> 0x4E with write bit)
#define PCF8574_ADDR 0x4E

// --- Function Prototypes ---
void I2C_Init(void);
void I2C_Start(void);
void I2C_Stop(void);
bit I2C_Write(unsigned char data);

void PCF_Write(unsigned char data);
void lcd_cmd(unsigned char cmd);
void lcd_data(unsigned char data);
void lcd_init(void);
void lcd_str(const char *str,char num);

// --- I2C Functions ---
void I2C_Init(void)
{
    SSPCON = 0x28;   // I2C Master
    SSPCON2 = 0x00;
    SSPADD = ((_XTAL_FREQ/4)/100000)-1; // 100kHz speed
    SSPSTAT = 0x00;
}

void I2C_Wait(void)
{
    while ((SSPCON2 & 0x1F) || (SSPSTAT & 0x04));
}

void I2C_Start(void)
{
    I2C_Wait(); SEN=1;
}

void I2C_Stop(void)
{
    I2C_Wait(); PEN=1;
}

bit I2C_Write(unsigned char data)
{
    I2C_Wait();
    SSPBUF=data;
    while(BF);
    I2C_Wait();
    return ACKSTAT;
}

// --- PCF8574 send ---
void PCF_Write(unsigned char data)
{
    I2C_Start();
    I2C_Write(PCF8574_ADDR);   // Slave address
    I2C_Write(data | BL);      // Send with backlight ON
    I2C_Stop();
}

// --- LCD Low-level send (4 bits at a time) ---
void lcd_send4bit(unsigned char half, unsigned char mode)
{
    unsigned char data;
    data = (half & 0xF0) | mode;

    // Pulse EN to latch data
    PCF_Write(data | EN);
    __delay_us(1);
    PCF_Write(data & ~EN);
    __delay_us(50);
}

void lcd_cmd(unsigned char cmd)
{
    lcd_send4bit(cmd & 0xF0, 0x00);   // upper 4 bits
    lcd_send4bit((cmd<<4), 0x00);     // lower 4 bits
    __delay_ms(2);
}

void lcd_data(unsigned char value)
{
    lcd_send4bit(value & 0xF0, RS);   // upper 4 bits with RS=1
    lcd_send4bit((value<<4), RS);     // lower 4 bits
    __delay_ms(2);
}

void lcd_init(void)
{
    __delay_ms(50);
    lcd_send4bit(0x30,0); __delay_ms(5);
    lcd_send4bit(0x30,0); __delay_us(200);
    lcd_send4bit(0x20,0); // 4-bit mode entry

    lcd_cmd(0x28); // 4-bit, 2-line
    lcd_cmd(0x0C); // Display ON, Cursor OFF
    lcd_cmd(0x06); // Auto-increment
    lcd_cmd(0x01); // Clear screen
    __delay_ms(2);
}

void lcd_str(const char*str,char num)
{
    char i;
    for(i=0;i<num;i++)
    {
        lcd_data(str[i]);
    }
}

// --- MAIN ---
void main(void)
{
    ADCON1=0x06;   // All pins digital
    TRISC3=1;      // SCL
    TRISC4=1;      // SDA

    I2C_Init();
    lcd_init();
            
    while(1)
    {
        lcd_cmd(0x85);
        lcd_str("HELLO",5);
        lcd_cmd(0xC5);
        lcd_str("WORLD",5);
        __delay_ms(1000);
        lcd_cmd(0x01);
        lcd_cmd(0x86);
        lcd_str("I am",4);
        lcd_cmd(0xC2);
        lcd_str("Sathiskumar A",13);
        __delay_ms(1000);
        lcd_cmd(0x01);  
        lcd_cmd(0x80);
        lcd_str("Embedded Systems",16);
        lcd_cmd(0xC3);
        lcd_str("Enthusiast",10);
        __delay_ms(1000);
        lcd_cmd(0x01);
        lcd_cmd(0x82);
        lcd_str("Passionate in",13);
        lcd_cmd(0xC1);
        lcd_str("IoT & Protocols",15);
        __delay_ms(1000);
        lcd_cmd(0x01); 
    }
}
